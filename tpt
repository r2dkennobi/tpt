#!/bin/bash
TPT_CACHE_FILE="$HOME/.cache/tpt.runcache"

_print_help() {
  cat <<EOF
  SYNOPSYS:
    tpt [OPTION] [ARGS]...

  DESCRIPTION:
    Transport yourself to another dimension (package folder)

  OPTION:
    --help, -h
      Show this usage screen
    --update-cache, -h
      Update the auto-completion cache
EOF
}

_bash_complete_packages() {
  (
  while IFS='' read -r line; do
    echo "${line%%:*}"
  done < "$TPT_CACHE_FILE"
  )
}

_tpt() {
  PROJECT_DIR=${PROJECT_DIR:-"$HOME"}
  local cur prev

  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}
  prev=${COMP_WORDS[COMP_CWORD-1]}

  if [[ "${#COMP_WORDS[@]}" -gt 2 ]]; then
    return 0
  fi
  case "$prev" in
    '-u'|'--update-cache'|'-h'|'--help')
      return 0
     ;;
  esac
  case "$cur" in
    -*)
      OPTS='--help --update-cache'
      mapfile -t COMPREPLY < <(compgen -W "${OPTS[*]}" -- "$cur")
      return 0
      ;;
  esac
  mapfile -t COMPREPLY < <(compgen -W "$(_bash_complete_packages)" -- "${cur}")
  return 0
}
complete -o bashdefault -F _tpt tpt

_generate_cache_if_necessary() {
  if ! [[ -e "$TPT_CACHE_FILE" ]]; then
    _generate_cache "$1"
  fi
}

_generate_cache() {
  mkdir -p "$HOME/.cache"
  local dirs=()
  {
  IFS=' ' read -r -a projects <<< "$1"
  while IFS= read -r p
  do
    dir_path=$(dirname "$p")
    pkg_name=$(basename "$dir_path")
    dirs+=("$pkg_name:$dir_path")
  done < <(find "${projects[@]}" -type f \( -name ".mjornir.yaml" -o \
                                            -name "package.xml" -o \
                                            -name ".travis.yml" -o \
                                            -name ".gitlab-ci.yml" -o \
                                            -name "WORKSPACE" \))
  dirs=($(echo "${dirs[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))
  printf "%s\n" "${dirs[@]}" > "$TPT_CACHE_FILE"
  }
}

tpt() {
  PROJECT_DIR=${PROJECT_DIR:-"$HOME"}
  local show_help tpt_back update_cache
  for arg in "$@";
  do
    case $arg in
      -h|--help)
        show_help=true
        shift
        ;;
      -u|--update-cache)
        update_cache=true
        shift
        ;;
      -)
        tpt_back=true
        shift
        ;;
      *)
        break
        ;;
    esac
  done

  if [[ ${show_help:-false} == "true" ]]; then
    _print_help
  elif [[ "${tpt_back:-false}" == "true" ]]; then
    cd - || exit
  elif [[ "${update_cache:-false}" == "true" ]]; then
    _generate_cache "$PROJECT_DIR"
  else
    _generate_cache_if_necessary "$PROJECT_DIR"
    local matches=()
    while IFS='' read -r line; do
      package="${line%%:*}"
      path="${line##*:}"
      if [[ "$package" == "$1" ]]; then
        matches+=("$path")
      fi
    done < "$TPT_CACHE_FILE"
    if [[ "${#matches[@]}" -eq 0 ]]; then
      return
    elif [[ "${#matches[@]}" -eq 1 ]]; then
      cd "${matches[0]}" || exit
    else
      select path in "${matches[@]}"; do
        cd "$path" || exit
        break
      done
    fi
  fi
}

complete -o bashdefault -F _tpt tpt

# Don't run the command if sourcing the file
if ! [[ $_ != "$0" ]]; then
  tpt "$@"
fi
